/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.talkylabs.reach.rest.api.authentix.configurationitem;

import com.talkylabs.reach.base.Starter;
import com.talkylabs.reach.exception.ApiConnectionException;
import com.talkylabs.reach.exception.ApiException;
import com.talkylabs.reach.exception.RestException;
import com.talkylabs.reach.http.HttpMethod;
import com.talkylabs.reach.http.Request;
import com.talkylabs.reach.http.Response;
import com.talkylabs.reach.http.ReachRestClient;
import com.talkylabs.reach.rest.Domains;




public class AuthenticationItemStarter extends Starter<AuthenticationItem>{
    private String pathConfigurationId;
    private String dest;
    private AuthenticationItem.Channel channel;
    private String serviceName;
    private String customCode;
    private String paymentInfo;
    private String templateId;
    private String templateDataMap;

    public AuthenticationItemStarter(final String pathConfigurationId, final String dest, final AuthenticationItem.Channel channel) {
        this.pathConfigurationId = pathConfigurationId;
        this.dest = dest;
        this.channel = channel;
    }

    public AuthenticationItemStarter setDest(final String dest){
        this.dest = dest;
        return this;
    }
    public AuthenticationItemStarter setChannel(final AuthenticationItem.Channel channel){
        this.channel = channel;
        return this;
    }
    public AuthenticationItemStarter setServiceName(final String serviceName){
        this.serviceName = serviceName;
        return this;
    }
    public AuthenticationItemStarter setCustomCode(final String customCode){
        this.customCode = customCode;
        return this;
    }
    public AuthenticationItemStarter setPaymentInfo(final String paymentInfo){
        this.paymentInfo = paymentInfo;
        return this;
    }
    public AuthenticationItemStarter setTemplateId(final String templateId){
        this.templateId = templateId;
        return this;
    }
    public AuthenticationItemStarter setTemplateDataMap(final String templateDataMap){
        this.templateDataMap = templateDataMap;
        return this;
    }

    @Override
    public AuthenticationItem start(final ReachRestClient client){
        String path = "/rest/authentix/v1/configurations/{configurationId}/authentications";

        path = path.replace("{"+"configurationId"+"}", this.pathConfigurationId.toString());
        path = path.replace("{"+"dest"+"}", this.dest.toString());
        path = path.replace("{"+"channel"+"}", this.channel.toString());

        Request request = new Request(
            HttpMethod.POST,
            Domains.API.toString(),
            path
        );
        addPostParams(request);
        Response response = client.request(request);
        if (response == null) {
            throw new ApiConnectionException("AuthenticationItem start operation failed: Unable to connect to server");
        } else if (!ReachRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
            throw new ApiException(restException);
        }

        return AuthenticationItem.fromJson(response.getStream(), client.getObjectMapper());
    }
    private void addPostParams(final Request request) {
        if (dest != null) {
            request.addPostParam("dest", dest);
    
        }
        if (channel != null) {
            request.addPostParam("channel", channel.toString());
    
        }
        if (serviceName != null) {
            request.addPostParam("serviceName", serviceName);
    
        }
        if (customCode != null) {
            request.addPostParam("customCode", customCode);
    
        }
        if (paymentInfo != null) {
            request.addPostParam("paymentInfo", paymentInfo);
    
        }
        if (templateId != null) {
            request.addPostParam("templateId", templateId);
    
        }
        if (templateDataMap != null) {
            request.addPostParam("templateDataMap", templateDataMap);
    
        }
    }
}
